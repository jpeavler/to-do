{"version":3,"sources":["logo.svg","components/List.js","components/AddList.js","components/Lists.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","list","refresh","markComplete","id","index","completeStatus","tempList","list_items","complete","_id","fetch","process","method","headers","body","JSON","stringify","then","displayListItems","map","item","checkOff","completed","onClick","key","name","desc","due","className","AddList","useState","listName","setLName","listDesc","setLDesc","listItems","setLItems","handleLIChange","value","tempArr","newListItem","onSubmit","event","preventDefault","newList","type","onChange","target","placeholder","required","concat","listItem","filter","s","_index","handleRemove","defaultValue","Lists","lists","setLists","useEffect","getLists","response","json","displayLists","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3aaac769.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst List = ({list, refresh}) => {\r\n    let markComplete = (id, index, completeStatus) => {\r\n        let tempList = list;\r\n        tempList.list_items[index].complete = completeStatus;\r\n        delete tempList._id;    //in order to make a patch request, the id has to be removed\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/lists/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(tempList)\r\n        }).then(refresh);\r\n    }\r\n\r\n    let displayListItems = list.list_items.map((item, index) => {\r\n        let checkOff;\r\n        let completed;\r\n        if(!item.complete){\r\n            checkOff = <button onClick={() => markComplete(list._id, index, true)}>Check off</button>\r\n        }else {\r\n            checkOff = <button onClick={() => markComplete(list._id, index, false)}>Restore</button>\r\n            completed = \"Complete!\"\r\n        }\r\n        return(\r\n            <li key = {index}>\r\n                {item.name}\r\n                {checkOff}{completed}\r\n                <ul>\r\n                    <li>{item.desc}</li>\r\n                    <li>{item.due}</li>\r\n                </ul>\r\n            </li>\r\n        );\r\n    });\r\n    return(\r\n        <div className=\"List\">\r\n            <h2>{list.name}</h2>\r\n            <p>{list.desc}</p>\r\n            <ul>{displayListItems}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;","import React, {useState} from 'react';\r\n\r\nconst AddList = ({refresh}) => {\r\n    const [listName, setLName] = useState('');\r\n    const [listDesc, setLDesc] = useState('');\r\n    const [listItems, setLItems] = useState([]);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const tempArr = listItems;   //toDo: push List Items onto this\r\n        setLItems(tempArr);\r\n        const newList = {name: listName, desc: listDesc, list_items: listItems};\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/lists`, {\r\n            method: 'POST',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(newList)\r\n        }).then(refresh)\r\n            .then(() => setLName(''))\r\n            .then(() => setLDesc(''))\r\n            .then(() => setLItems([]));\r\n    }\r\n\r\n    const handleLIChange = (key, value, index) => {\r\n        let tempArr = listItems;\r\n        let newListItem = tempArr[index];\r\n        newListItem[key] = value;\r\n        newListItem.complete = false;\r\n        setLItems(tempArr);\r\n    }\r\n\r\n    const handleRemove = (index) => {\r\n        setLItems(listItems.filter((s, _index) => index !== _index));\r\n    }\r\n\r\n    const renderListItemForm = () => {\r\n        return listItems.map((listItem, index) => {\r\n            return(\r\n                <span key={index}>\r\n                    <input value={listItem.name} \r\n                        type=\"text\" \r\n                        onChange={({target}) => handleLIChange(\"name\", target.value, index)} \r\n                        placeholder={`List Item #${index +1} Name`} required/>\r\n                    <textarea value={listItem.desc} \r\n                        type=\"text\" \r\n                        onChange={({target}) => handleLIChange(\"desc\", target.value, index)} \r\n                        placeholder={`List Item #${index + 1} Description`}/>\r\n                    <label>Due Date</label>\r\n                    <input value={listItem.due} \r\n                        type=\"date\" \r\n                        onChange={({target}) => handleLIChange(\"due\", target.value, index)} \r\n                        placeholder=\"Due Date\"/>\r\n                        <button type=\"button\" \r\n                        onClick={() => handleRemove(index)}>X</button>\r\n                </span>\r\n            )\r\n        });\r\n    }\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <input value={listName}\r\n                    type=\"text\" \r\n                    onChange={({target}) => setLName(target.value)} \r\n                    placeholder=\"List Name\" \r\n                    required/>\r\n            <textarea value={listDesc}\r\n                    type=\"text\" \r\n                    onChange={({target}) => setLDesc(target.value)} \r\n                    placeholder=\"List Description\"/>\r\n            <button type=\"button\" onClick={() => setLItems(listItems.concat([{}]))}>+ Add List Item</button>\r\n            {renderListItemForm()}\r\n            <input type=\"Submit\" defaultValue=\"Create List\"/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddList;","import React, {useState, useEffect} from 'react';\r\nimport List from './List';\r\nimport AddList from './AddList';\r\n\r\nconst Lists = () => {\r\n    const [lists, setLists] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        getLists();\r\n    }, []);\r\n\r\n    const getLists = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/lists`)\r\n            .then(response => response.json())\r\n            .then(lists => setLists(lists));\r\n    }\r\n\r\n    const displayLists = lists.map((list) => {\r\n        return <List key = {list._id} \r\n                list={list} \r\n                refresh={getLists}/>\r\n    });\r\n\r\n    return (\r\n        <div className='Lists'>\r\n            <h1>My To Do Lists</h1>\r\n            <AddList refresh={getLists}/>\r\n            {displayLists}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lists;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Lists from './components/Lists'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Lists/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}